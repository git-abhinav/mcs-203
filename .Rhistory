merge_y
x
merge_y
insert_y
insert_y
merge_y
quick_y
trendline
library(basicTrendline)
trendline()
trendline
?trendline
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "line2P")
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "log2P")
trendline(x, insert_y, model = "exp2P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "power3P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "line2P")
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "power2P", summary = TRUE)
fitting <- data.frame(insert, quick, merge)
fitting[3] = trendline(x, insert_y, model="power2P")
trendline(x, insert_y, model="power2P")
trendline(x, quick_y, model="log2P")
trendline(x, quick_y, model="line2P")
trendline(x, quick_y, model="line3P")
trendline(x, quick_y, model="line3P", type = "")
trendline(x, quick_y, model="line3P", type = "l")
?trendline_summary
trendline_summary(x, quick_y)
trendline_summary(x, quick_y)
trendline(x, quick_y, model="line2P")
trendline(x, quick_y, model="line2P",type="l")
trendline(x, quick_y, model="line3P",type="l")
trendline(x, quick_y, model="log2P",type="l")
trendline(x, quick_y,type="l", model="log2P")
trendline(x, quick_y,type="l", model=", model="log2P"")
trendline(x, quick_y,type="l", model=", model="log2P"")
trendline(x, quick_y,type="l", model="exp2P")
trendline(x, quick_y,type="l", model="exp3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
lines(x, x*log2(x))
trendline(x, insert_y, type="l", model="line3P")
trendline(x, insert_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="line2P")
trendline(x, quick_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="log2P")
trendline(x, quick_y, type="l", model="exp2P")
trendline(x, quick_y, type="l", model="exp3P")
trendline(x, quick_y, type="l", model="power2P")
trendline(x, quick_y, type="l", model="power3P")
trendline(x, quick_y, type="l", model="power3P")
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
plot(x, quick_y)
plot(x, quick_y,type="l")
plot(x, quick_y,type="l")
lines(x, merge_y, type="l")
lines(x, merge_y, type="l",col ="red")
lines(x, n*log(n), type="l",col ="green")
lines(x, n*log2(n), type="l",col ="green")
lines(x, x*log2(x), type="l",col ="green")
Rcpp::sourceCpp('Desktop/u.cpp')
?line
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
x<-1:100
y1<-x*x*x+20*x+1
y1
plot(x, y1, type ="l")
line(x, x*x*x)
lines(x, x*x*x)
lines(x, x*x*x, col = "red")
lines(x, 3*x*x*x, col = "red")
y = x*x-100*x-200
y
plot(x, y)
lines(x, 3*x*x*x, col = "red")
lines(x, 3*x*x*x, col = "red", type="l")
plot(x, y,type="")
plot(x, y,type="l")
y = x*x - 100*x - 200
y
plot(x, y,type="l")
lines(x, x*x)
lines(x, x*x, type="l")
lines(x, x*x/3, type="l")
seq(100, 600, 10)
x<- seq(100, 600, 10)
x
plot(x, x*x-100x-200, type="l")
plot(x, x*x-100*x-200, type="l")
lines(x, x*x, col = "red")
lines(x, (x*x)/3, col = "red")
lines(x, (x*x)/3, col = "green")
x<-seq
x<-seq(1, 100, 2)
x
plot(x, x*x-10)
plot(x, x*x-10, type="l")
x<-seq(1, 50, 2)
plot(x, x*x-10, type="l")
lines(x, x*x/2, col = "red")
x<-seq(1, 20, 2)
plot(x, x*x-10, type="l")
lines(x, x*x/2, col = "red")
plot(sample(10), sample(10), col="red")
par(new=TRUE)
plot(sample(5), sample(5), col="green")
plot(sample(510), sample(10), col="green")
plot(sample(10), sample(10), col="green")
par(new=TRUE)
plot(sample(10), sample(10), col="red")
lines(sample(10), sample(10))
iris
iris[,4]
iris[,5]
unique(iris[,5])
k = 3
train = iris[1:100,]
train
iris
k = 3
train = iris[1:100,]
plot(iris[,1])
plot(iris[,2])
plot(iris[,3])
plot(iris[,4])
plot(iris[,5])
plot(iris[,4])
iris[,4]
plot(iris[,3])
i = iris[,3]
k1 = c()
k2 = c()
k3 = c()
a =  c()
a =  c(a, "a")
a
a =  c(a, "b")
a
range(1,10)
for i in 1:10:
for i in 1:10
for (i in 1:10)
print i
for ( i in 1:10){}
for ( i in 1:10){
print(i)}
row(iris)
col(iris)
len(iris)
dim(iris)
a= dim(iris)
a
a[1]
k1 = c()
k1 = c()
k2 = c()
k3 = c()
attribute_no = 3
k1 = c(k1, iris[1, attribute_no])  #   arbitrary
k2 = c(k2, iris[2, attribute_no])  #   arbitrary
k3 = c(k3, iris[3, attribute_no])  #
prev_mean1 = mean(k1)
prev_mean2 = mean(k2)
prev_mean3 = mean(k3)
prev_mean1
k1
k1[1]
k1[2]
k1[3]
k1
k1 = iris[, attribute_no]
View(iris)
data = iris[, attribute_no]
data
plot(iris[,5])
plot(iris[,])
plot(iris[1,])
plot(iris[1,5])
plot(iris[2,5])
plot(iris[3,5])
plot(iris[4,5])
c1 = iris[1,]
c1
c2 = iris[2,]
c3 = iris[3,]
c2
c3
source('~/Desktop/College/Under Graduation/6th Semester/Data Mining/Clustering/kmeans.r')
setwd("~/Desktop/College/Programs/mcs-203")
#FORSO2
ggplot(head(datatoprint), aes(x=dates, y=so2))+
geom_bar(stat="identity")
library(ggplot2)
#FORSO2
ggplot(head(datatoprint), aes(x=dates, y=so2))+
geom_bar(stat="identity")
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
alldates = seq(as.Date('2015/01/01'), as.Date('2015/12/31'), by="day")
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
dim(datatoprint)
write.csv(data, "pollution_with_no_na_and_date_as_what_i_wanted.csv")
alldates = seq(as.Date('2015/01/01'), as.Date('2015/12/31'), by="day")
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
#MAIN PART BRO
data = read.csv("pollution_with_no_na_and_date_as_what_i_wanted.csv")
alldates = seq(as.Date('2015/01/01'), as.Date('2015/12/31'), by="day")
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
ggplot(head(datatoprint), aes(x=dates, y=so2))+
geom_point(col="red")
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
dim(datatoprint)
#MAIN PART BRO
data = read.csv("pollution_with_no_na_and_date_as_what_i_wanted.csv")
dim(data)
data
data = read.csv("pollution_with_no_na.csv")
data
# date converter
dt = data$Sampling.Date
xd = c()
for(i in seq(1,length(dt))){
d = strsplit(as.character(dt[i]),"-")[[1]][1]
m = strsplit(as.character(dt[i]),"-")[[1]][2]
y = strsplit(as.character(dt[1]),"-")[[1]][3]
x = paste((2000+as.integer(y)), m,d)
x = gsub(" ", "-", x)
xd[i] = x
#data$Sampling.Date[i] = x
}
data$Sampling.Date= xd
write.csv(data, "pollution_with_no_na_and_date_as_what_i_wanted.csv")
#MAIN PART BRO
data = read.csv("pollution_with_no_na_and_date_as_what_i_wanted.csv")
alldates = seq(as.Date('2015/01/01'), as.Date('2015/12/31'), by="day")
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
datatoprint
#MAIN PART BRO
data = read.csv("pollution_with_no_na_and_date_as_what_i_wanted.csv")
data
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
names(data)
d
alldates
data$Sampling.Date
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
#MAIN PART BRO
data = read.csv("pollution_with_no_na_and_date_as_what_i_wanted.csv")
alldates = seq(as.Date('2015/01/01'), as.Date('2015/12/31'), by="day")
tempdata = data
datatoprint = data.frame(
dates = c(),
no2 = c(),
so2 = c(),
pm2.5 = c(),
pm10 = c()
)
d = c()
no2 = c()
so2 = c()
pm2.5 = c()
pm10 = c()
j = 0
for(i in seq(1,length(alldates)))
{
whichallhave = which(alldates[i]==data$Sampling.Date)
if(length(whichallhave)>0)
{
j = j+1
d[j] = as.character(alldates[i])
no2[j]=mean(data$NO2[whichallhave])
so2[j]=mean(data$SO2[whichallhave])
pm2.5[j]=mean(data$PM.2.5[whichallhave])
pm10[j]=mean(data$RSPM.PM10[whichallhave])
}
}
datatoprint = data.frame(
"dates"=d,
"no2"=no2,
"so2"=so2,
"pm2.5"=pm2.5,
"pm10"=pm10
)
datatoprint
