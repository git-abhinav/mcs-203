Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
h<-c(1)
append(h, 2)
Rcpp::sourceCpp('Desktop/u.cpp')
smaple(100)
sample(100)
unique(sample(90))
unique(sample(900))
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
?plot
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
?plot
line(insert_x, 2*insert_y)
lines(insert_x, 2*insert_y)
lines(x, 2*insert_y)
x
insert_y
lines(sample(10), sample(10))
lines(sample(1000), sample(1000))
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
quick_y
plot(x, quick_y)
plot(x, quick_y, type="l")
quick_y
length(quick_y)
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
l<-c(2615,
10137,
22412,
40347,
62846,
90097,
122372,
161991,
202931,
249690)
l
m<-l
m
l<-c(100,
200,
300,
400,
500,
600,
700,
800,
900,
1000)
plot(l, m)
plot(l, m, type="l")
m2<-c(672,
1544,
2488,
3488,
4488,
5576,
6676,
7776,
8876,
9976)
m2
m3<-c(652,
1592,
2571,
3631,
4774,
5836,
7172,
8361,
9774,
10820)
lines(l, m2)
lines(l, m3)
plot(l, m2)
plot(l, m2,type="l")
plot(l, m3,type="l")
plot(l, m2,type="l")
lines(l, m3, type= "l")
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
data_insert
data_quick
merge_y
x
merge_y
insert_y
insert_y
merge_y
quick_y
trendline
library(basicTrendline)
trendline()
trendline
?trendline
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "line2P")
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "log2P")
trendline(x, insert_y, model = "exp2P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "power3P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "line2P")
trendline(x, insert_y, model = "line3P")
trendline(x, insert_y, model = "power2P")
trendline(x, insert_y, model = "power2P", summary = TRUE)
fitting <- data.frame(insert, quick, merge)
fitting[3] = trendline(x, insert_y, model="power2P")
trendline(x, insert_y, model="power2P")
trendline(x, quick_y, model="log2P")
trendline(x, quick_y, model="line2P")
trendline(x, quick_y, model="line3P")
trendline(x, quick_y, model="line3P", type = "")
trendline(x, quick_y, model="line3P", type = "l")
?trendline_summary
trendline_summary(x, quick_y)
trendline_summary(x, quick_y)
trendline(x, quick_y, model="line2P")
trendline(x, quick_y, model="line2P",type="l")
trendline(x, quick_y, model="line3P",type="l")
trendline(x, quick_y, model="log2P",type="l")
trendline(x, quick_y,type="l", model="log2P")
trendline(x, quick_y,type="l", model=", model="log2P"")
trendline(x, quick_y,type="l", model=", model="log2P"")
trendline(x, quick_y,type="l", model="exp2P")
trendline(x, quick_y,type="l", model="exp3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
trendline(x, quick_y,type="l", model="power2P")
trendline(x, quick_y,type="l", model="power3P")
lines(x, x*log2(x))
trendline(x, insert_y, type="l", model="line3P")
trendline(x, insert_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="line2P")
trendline(x, quick_y, type="l", model="line3P")
trendline(x, quick_y, type="l", model="log2P")
trendline(x, quick_y, type="l", model="exp2P")
trendline(x, quick_y, type="l", model="exp3P")
trendline(x, quick_y, type="l", model="power2P")
trendline(x, quick_y, type="l", model="power3P")
trendline(x, quick_y, type="l", model="power3P")
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
plot(x, quick_y)
plot(x, quick_y,type="l")
plot(x, quick_y,type="l")
lines(x, merge_y, type="l")
lines(x, merge_y, type="l",col ="red")
lines(x, n*log(n), type="l",col ="green")
lines(x, n*log2(n), type="l",col ="green")
lines(x, x*log2(x), type="l",col ="green")
Rcpp::sourceCpp('Desktop/u.cpp')
?line
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
Rcpp::sourceCpp('Desktop/u.cpp')
x<-1:100
y1<-x*x*x+20*x+1
y1
plot(x, y1, type ="l")
line(x, x*x*x)
lines(x, x*x*x)
lines(x, x*x*x, col = "red")
lines(x, 3*x*x*x, col = "red")
y = x*x-100*x-200
y
plot(x, y)
lines(x, 3*x*x*x, col = "red")
lines(x, 3*x*x*x, col = "red", type="l")
plot(x, y,type="")
plot(x, y,type="l")
y = x*x - 100*x - 200
y
plot(x, y,type="l")
lines(x, x*x)
lines(x, x*x, type="l")
lines(x, x*x/3, type="l")
seq(100, 600, 10)
x<- seq(100, 600, 10)
x
plot(x, x*x-100x-200, type="l")
plot(x, x*x-100*x-200, type="l")
lines(x, x*x, col = "red")
lines(x, (x*x)/3, col = "red")
lines(x, (x*x)/3, col = "green")
x<-seq
x<-seq(1, 100, 2)
x
plot(x, x*x-10)
plot(x, x*x-10, type="l")
x<-seq(1, 50, 2)
plot(x, x*x-10, type="l")
lines(x, x*x/2, col = "red")
x<-seq(1, 20, 2)
plot(x, x*x-10, type="l")
lines(x, x*x/2, col = "red")
plot(sample(10), sample(10), col="red")
par(new=TRUE)
plot(sample(5), sample(5), col="green")
plot(sample(510), sample(10), col="green")
plot(sample(10), sample(10), col="green")
par(new=TRUE)
plot(sample(10), sample(10), col="red")
lines(sample(10), sample(10))
iris
iris[,4]
iris[,5]
unique(iris[,5])
k = 3
train = iris[1:100,]
train
iris
k = 3
train = iris[1:100,]
plot(iris[,1])
plot(iris[,2])
plot(iris[,3])
plot(iris[,4])
plot(iris[,5])
plot(iris[,4])
iris[,4]
plot(iris[,3])
i = iris[,3]
k1 = c()
k2 = c()
k3 = c()
a =  c()
a =  c(a, "a")
a
a =  c(a, "b")
a
range(1,10)
for i in 1:10:
for i in 1:10
for (i in 1:10)
print i
for ( i in 1:10){}
for ( i in 1:10){
print(i)}
row(iris)
col(iris)
len(iris)
dim(iris)
a= dim(iris)
a
a[1]
k1 = c()
k1 = c()
k2 = c()
k3 = c()
attribute_no = 3
k1 = c(k1, iris[1, attribute_no])  #   arbitrary
k2 = c(k2, iris[2, attribute_no])  #   arbitrary
k3 = c(k3, iris[3, attribute_no])  #
prev_mean1 = mean(k1)
prev_mean2 = mean(k2)
prev_mean3 = mean(k3)
prev_mean1
k1
k1[1]
k1[2]
k1[3]
k1
k1 = iris[, attribute_no]
View(iris)
data = iris[, attribute_no]
data
plot(iris[,5])
plot(iris[,])
plot(iris[1,])
plot(iris[1,5])
plot(iris[2,5])
plot(iris[3,5])
plot(iris[4,5])
c1 = iris[1,]
c1
c2 = iris[2,]
c3 = iris[3,]
c2
c3
source('~/Desktop/College/Under Graduation/6th Semester/Data Mining/Clustering/kmeans.r')
setwd("/Users/Abhinav/Desktop/Programs/mcs-203")
ls
ls
getwd()
library(clsuetr)
library(cluster)
dataSte
dataSet
dataSet = read.csv("pollution.csv")
dataSet
iris[-5]
dim(iris[-5])
dim(iris)
names(iris)
d = dataSet[-c(1,2,3,4,5,6,)]
d = dataSet[-c(1,2,3,4,5,6)]
d
dim(d)
results <- kmeans(d,3)
d
d = dataSet[-c(1,2,3,4,5,6,7)]
d
which(d$Type.of.Location==NA)
which(d$SO2=NA)
which(d$SO2==NA)
which(d$NO2==NA)
which(d$RSPM.PM10==NA)
which(d$PM.2.5==NA)
which(d$season==NA)
kmeans(d,3)
kmeans(d[-c(1,6)],3)
kmeans(d[-c(1,6)],2)
kmeans(d[,-c(1,6)],2)
d
d[-c(1,6)]
which(d$PM.2.5==NA)
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
}
d
d$PM.2.5
tail(d$PM.2.5)
d = dataSet
d = d[,c(d$Type.of.Location, d$SO2, d$NO2, d$RSPM.PM10, d$PM.2.5, d$season)]
d = d[c(d$Type.of.Location, d$SO2, d$NO2, d$RSPM.PM10, d$PM.2.5, d$season)]
d = d[d$Type.of.Location, d$SO2, d$NO2, d$RSPM.PM10, d$PM.2.5, d$season]
d
dim(d)
x = d (d$Stn.Code)
x = d[d$Stn.Code]
x = d[c(d$Stn.Code)]
x = d[c(1)]
x
x = d[c(7,8,9,10,11,12)]
x
results <- kmeans(x[-c(1, 6)],3)
results <- kmeans(x[-c(1)],3)
results <- kmeans(x,3)
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
quarter = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter = monthColumn[i]%4
}
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
quarter = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter = mod(monthColumn[i], 4)
}
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
quarter = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter = monthColumn[i] %% 4
}
names(dataSet)
write.csv(dataSet, file = "pollution.csv")
4%%4
5%%4
7%%4
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
quarter = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter[i] = monthColumn[i] %% 4
}
write.csv(dataSet, file = "pollution.csv")
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
quarter = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter[i] = as.integer(monthColumn[i] / 4) + 1
}
write.csv(dataSet, file = "pollution.csv")
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
cat("-", monthColumn[i], "\n")
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter[i] = as.integer(monthColumn[i] / 4) + 1
}
write.csv(dataSet, file = "pollution.csv")
dataSet = read.csv("cpcb_dly_aq_odisha-2015_0 (1).csv")
dataSet$X = NULL
dates = dataSet$Sampling.Date
monthColumn = c()
for(i in seq(1, dim(dataSet)[1])){
monthColumn[i] = as.integer(strsplit(as.character(dates[i]), "-")[[1]][2])
if(monthColumn[i]>=3 && monthColumn[i] <= 6)
dataSet$season[i] = "summer"
else if(monthColumn[i]>=7 && monthColumn[i] <= 9)
dataSet$season[i] = "rainy"
else
dataSet$season[i] = "winter"
dataSet$quarter[i] = as.integer(monthColumn[i] / 4) + 1
}
write.csv(dataSet, file = "pollution.csv")
